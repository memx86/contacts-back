{
  "openapi": "3.0.0",
  "info": {
    "title": "Contacts API",
    "description": "Contacts API developed by memx86",
    "contact": {
      "email": "memx86@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.2"
  },
  "servers": [
    {
      "url": "https://memx86-contacts.herokuapp.com/api"
    }
  ],
  "tags": [
    {
      "name": "users",
      "description": "Operations available for users"
    },
    {
      "name": "contacts",
      "description": "Operations available for contacts"
    }
  ],
  "paths": {
    "/users/signup": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "create user",
        "description": "Create new user\n",
        "operationId": "createUser",
        "requestBody": {
          "description": "User to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "409": {
            "description": "Email in use"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "log in",
        "description": "Log in user\n",
        "operationId": "loginUser",
        "requestBody": {
          "description": "user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          },
          "400": {
            "description": "Validation error | Email or password is wrong | Please verify your email"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/users/verify/{verificationToken}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "verify user",
        "description": "Provide verification token to get activation link via email\n",
        "operationId": "verifyUser",
        "parameters": [
          {
            "name": "verificationToken",
            "in": "path",
            "description": "user's verification token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Verification successful"
          },
          "400": {
            "description": "Verification has already been passed"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/users/verify": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "reverify user",
        "description": "Provide  email to resend verification link\n",
        "operationId": "reVerifyUser",
        "requestBody": {
          "description": "user's email to reverify",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Verify"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification email sent"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/users/logout": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "log user out",
        "description": "Logout user\n",
        "operationId": "logoutUser",
        "responses": {
          "204": {
            "description": "successfull logout"
          },
          "400": {
            "description": "Wrong token type"
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "current user info",
        "description": "Get current user information\n",
        "operationId": "currentUser",
        "responses": {
          "200": {
            "description": "current user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Wrong token type"
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/users/": {
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "change user's subscription",
        "description": "Change user's subscription field\n",
        "operationId": "changeUserSubscription",
        "requestBody": {
          "description": "Updated subscription field",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Subscription"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "update successfull",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Wrong token type | Validation error"
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/users/avatars": {
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "upload an avatar",
        "description": "Change user's avatar\n",
        "operationId": "changeUserAvatar",
        "requestBody": {
          "content": {
            "image/*": {
              "schema": {
                "type": "string",
                "format": "binar"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "update successfull",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Wrong token type | no file | not image"
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/contacts": {
      "get": {
        "tags": [
          "contacts"
        ],
        "summary": "get all user's contacts",
        "description": "Get all user's contacts\n",
        "operationId": "getContacts",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number, default: 1",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Per page value form 20 to 50, default: 20",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "favorite",
            "in": "query",
            "description": "get favorite/not favorite contacts",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "found contacts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contacts"
                }
              }
            }
          },
          "400": {
            "description": "Wrong token type"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "contacts"
        ],
        "summary": "adds contact",
        "description": "Creates new contact",
        "operationId": "addContact",
        "requestBody": {
          "description": "Contact to add",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewContact"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "contact created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "400": {
            "description": "Wrong token type | Missing required fields | Validation error"
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/contacts/{contactId}": {
      "get": {
        "tags": [
          "contacts"
        ],
        "summary": "get contact by id",
        "description": "Get user's contact by id\n",
        "operationId": "getContactById",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "contact's id",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "found contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "400": {
            "description": "Wrong token type"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Contact not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "contacts"
        ],
        "summary": "update contact by id",
        "description": "Updates a contact by id",
        "operationId": "updateContact",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "contact's id",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated contact",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUpdatedContact"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "contact updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "400": {
            "description": "Wrong token type | Missing fields | Validation error"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Contact not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "contacts"
        ],
        "summary": "delete contact by id",
        "description": "Deletes a contact by id",
        "operationId": "deleteContact",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "contact's id",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "contact deleted id# {contactId}"
          },
          "400": {
            "description": "Wrong token type"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Contact not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/contacts/{contactId}/favorite": {
      "patch": {
        "tags": [
          "contacts"
        ],
        "summary": "update favorite field",
        "description": "Updates contact's favorite field by id",
        "operationId": "updateFavorite",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "contact's id",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated contact's favorite field",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Favorite"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "contact's favorite field updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "400": {
            "description": "Wrong token type | Missing required field favorite | Validation error"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Contact not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "NewUser": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@mail.com"
          },
          "password": {
            "type": "string",
            "example": "123456"
          },
          "subscription": {
            "type": "string",
            "example": "starter"
          },
          "avatarURL": {
            "type": "string",
            "example": "https://s.gravatar.com/avatar/e1102c33ff44561b951fc9fde8350062"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@mail.com"
          },
          "subscription": {
            "type": "string",
            "example": "starter"
          },
          "avatarURL": {
            "type": "string",
            "example": "https://s.gravatar.com/avatar/e1102c33ff44561b951fc9fde8350062"
          }
        }
      },
      "NewContact": {
        "required": [
          "email",
          "name",
          "phone"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@mail.com"
          },
          "phone": {
            "type": "string",
            "format": "phone",
            "example": "+38(050)111-11-11"
          },
          "favorite": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "NewUpdatedContact": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@mail.com"
          },
          "phone": {
            "type": "string",
            "format": "phone",
            "example": "+38(050)111-11-11"
          },
          "favorite": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "Contact": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "620bd7c554c7112a78fd5bd3"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@mail.com"
          },
          "phone": {
            "type": "string",
            "format": "phone",
            "example": "+38(050)111-11-11"
          },
          "favorite": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "Contacts": {
        "type": "object",
        "properties": {
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contact"
            }
          },
          "page": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "total_results": {
            "type": "integer"
          }
        }
      },
      "LogIn": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@mail.com"
          },
          "password": {
            "type": "string",
            "example": "123456"
          }
        }
      },
      "Verify": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@mail.com"
          }
        }
      },
      "Subscription": {
        "required": [
          "subscription"
        ],
        "type": "object",
        "properties": {
          "subscription": {
            "type": "string",
            "example": "pro"
          }
        }
      },
      "Favorite": {
        "required": [
          "favorite"
        ],
        "type": "object",
        "properties": {
          "favorite": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "inline_response_200": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "JWT token"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      }
    },
    "responses": {
      "NotFoundError": {
        "description": "Not found"
      },
      "ContactNotFoundError": {
        "description": "Contact not found"
      },
      "MissingError": {
        "description": "Missing fields"
      },
      "MissingReqError": {
        "description": "Missing required fields"
      },
      "MissingReqFavError": {
        "description": "Missing required field favorite"
      },
      "ValidationError": {
        "description": "Validation error"
      },
      "RegistrationError": {
        "description": "Email in use"
      },
      "AuthError": {
        "description": "Email or password is wrong"
      },
      "UnauthorizedError": {
        "description": "Not authorized"
      },
      "TokenTypeError": {
        "description": "Wrong token type"
      },
      "UserNotFoundError": {
        "description": "User not found"
      },
      "EmailError": {
        "description": "Can't send email"
      },
      "NotVerifiedError": {
        "description": "Please verify your email"
      },
      "VerificationError": {
        "description": "Verification has already been passed"
      },
      "ServerError": {
        "description": "Server error"
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}